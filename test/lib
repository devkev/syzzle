
__syz_marker="+"

function indent {
	__syz_marker="$__syz_marker+"
}

function unindent {
	__syz_marker="${__syz_marker%+}"
}

__syz_msg_location_file=()
__syz_msg_location_line=()

function mark_location {
	__syz_msg_location_file+=("${BASH_SOURCE[2]}")    # push our caller's caller
	__syz_msg_location_line+=("${BASH_LINENO[1]}")    # push our caller's caller
}

function unmark_location {
	unset "__syz_msg_location_file[$((${#__syz_msg_location_file[@]}-1))]"    # pop
	unset "__syz_msg_location_line[$((${#__syz_msg_location_line[@]}-1))]"    # pop
}

if [ "$quiet" = y ]; then

	# This function based on https://github.com/fearside/ProgressBar/blob/master/progressbar.sh
	function _progress_bar {
		local msg="$1" ; shift
		local sofar="$1" ; shift
		local total="$1" ; shift

		local -i progress=($sofar*100/$total*100)/100
		local -i done=(${progress}*4)/10
		local -i left=40-$done

		# Build progressbar string lengths
		local donestr=$(printf "%${done}s")
		local leftstr=$(printf "%${left}s")

		# eg: Progress : [########################################] 100%
		echo -ne "\r$msg: [${donestr// /#}${leftstr// /-}] ${progress}%"
	}

	total_lines="$(( $(wc -l "$testdir/tests" | awk '{print$1}') ))"

	function msg {
		local current_line="$(( ${BASH_LINENO[$((${#BASH_LINENO[@]}-3))]} ))"
		#echo "$current_line/$total_lines"
		_progress_bar "Running tests" $current_line $total_lines
	}

	function blankline {
		msg "$@"
	}

	_progress_bar "Running tests" 0 $total_lines

else

	__syz_max_location_file_width=0
	__syz_max_location_line_width=3

	function msg {
		if [ "${#__syz_msg_location_file[@]}" -eq 0 ]; then
			# use the caller of msg in this case
			local location_file="${BASH_SOURCE[1]}"
			local location_line="${BASH_LINENO[0]}"
		else
			local location_file="${__syz_msg_location_file[$((${#__syz_msg_location_file[@]}-1))]}"
			local location_line="${__syz_msg_location_line[$((${#__syz_msg_location_line[@]}-1))]}"
		fi

		location_file="${location_file#./}"

		if [ "$__syz_max_location_file_width" -lt "${#location_file}" ]; then
			__syz_max_location_file_width="${#location_file}"
		fi
		if [ "$__syz_max_location_line_width" -lt "${#location_line}" ]; then
			__syz_max_location_line_width="${#location_line}"
		fi

		printf "[%-${__syz_max_location_file_width}s %${__syz_max_location_line_width}s] %s %s\n" "$location_file" "$location_line" "$__syz_marker" "$*"
	}

	function blankline {
		echo
	}

fi

function do_run {
	indent
	mark_location
	msg "${FUNCNAME[0]} $*"
	"$@" > "$__syz_tmpfile"
	__syz_rc="$?"
	__syz_o="$(<"$__syz_tmpfile")"
	if [ "$verbose" = y ]; then
		indent
		msg "rc=$__syz_rc"
		msg "---- start output ----"
		if [ "$__syz_o" ]; then
			echo "$__syz_o"
		fi
		msg "---- end output ----"
		unindent
	fi
	unmark_location
	unindent
}

function run {
	indent
	mark_location
	msg "${FUNCNAME[0]} $*"
	check no_leaked_vars --setup
	check no_leaked_aliases --setup
	do_run "$@"
	check no_leaked_vars
	check no_leaked_aliases
	unmark_location
	unindent
}

function via_tty {
	indent
	mark_location
	msg "${FUNCNAME[0]} $*"
	function tty {
		:
	}
	"$@"
	unset -f tty
	unmark_location
	unindent
}


function check {
	local __syz_what="$1" ; shift
	indent
	mark_location
	set -e
	check_"$__syz_what" "$@"
	set +e
	unmark_location
	unindent
}

